import { createSlice, PayloadAction } from "@reduxjs/toolkit";

export interface User {
  _id: string;
  name: string;
  email: string;
  photo: string;
  mobile: string;
  role: string;
  subscriptionStatus: string;
  subscriptionPlan: string;
  features: string[];
}

interface UsersState {
  users: User[];
  loading: boolean;
  error: string | null;
}

const initialState: UsersState = {
  users: [],
  loading: false,
  error: null,
};

const usersSlice = createSlice({
  name: "users",
  initialState,
  reducers: {
    // Start of a request (for any async action)
    fetchUsersStart: (state) => {
      state.loading = true;
      state.error = null;
    },

    // Fetch users success
    fetchUsersSuccess: (state, action: PayloadAction<User[]>) => {
      state.loading = false;
      state.users = action.payload;
      state.error = null;
    },

    // Fetch users failure
    fetchUsersFailure: (state, action: PayloadAction<string | null>) => {
      state.loading = false;
      state.error = action.payload;
    },

    // Create user success
    createUserSuccess: (state, action: PayloadAction<User>) => {
      state.loading = false;
      state.users.push(action.payload);
      state.error = null;
    },

    // Update user success
    updateUserSuccess: (state, action: PayloadAction<User>) => {
      state.loading = false;
      const index = state.users.findIndex(
        (user) => user.email === action.payload.email
      );
      if (index !== -1) {
        state.users[index] = action.payload;
      }
      state.error = null;
    },

    // General failure handler
    userRequestFailure: (state, action: PayloadAction<string | null>) => {
      state.loading = false;
      state.error = action.payload;
    },
  },
});

// Action creators generated by createSlice
export const {
  fetchUsersStart,
  fetchUsersSuccess,
  fetchUsersFailure,
  createUserSuccess,
  updateUserSuccess,
  userRequestFailure,
} = usersSlice.actions;

export default usersSlice.reducer;
