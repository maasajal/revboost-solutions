import { createSlice, PayloadAction } from "@reduxjs/toolkit";

export interface User {
  _id: string;
  name: string;
  email: string;
  photo: string;
  mobile: string;
  role: string;
  subscriptionStatus: string;
  subscriptionPlan: string;
  features: string[];
}

interface UsersState {
  user: User | {};
  loading: boolean;
  error: string | null;
}

const initialState: UsersState = {
  user: {},
  loading: false,
  error: null,
};

const currentUserSlice = createSlice({
  name: "currentUser",
  initialState,
  reducers: {
    // Start of a request (for any async action)
    fetchUsersStart: (state) => {
      state.loading = true;
      state.error = null;
    },

    // Fetch users success
    fetchUserSuccess: (state, action: PayloadAction<User[]>) => {
      state.loading = false;
      state.user = action.payload;
      state.error = null;
    },

    // Fetch users failure
    fetchUsersFailure: (state, action: PayloadAction<string | null>) => {
      state.loading = false;
      state.error = action.payload;
    },

    // General failure handler
    userRequestFailure: (state, action: PayloadAction<string | null>) => {
      state.loading = false;
      state.error = action.payload;
    },
  },
});

// Action creators generated by createSlice
export const {
  fetchUsersStart,
  fetchUserSuccess,
  fetchUsersFailure,
  userRequestFailure,
} = currentUserSlice.actions;

export default currentUserSlice.reducer;
